// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/imu.proto
// Protobuf C++ Version: 5.27.1

#include "proto/imu.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kevin {

inline constexpr Imu::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        accels_{nullptr},
        gyros_{nullptr},
        mags_{nullptr},
        orientation_{nullptr},
        imu_temp_{0},
        temperature_{0},
        pressure_{0},
        altitude_{0},
        timestamp_{::uint64_t{0u}},
        calibrated_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Imu::Imu(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDefaultTypeInternal _Imu_default_instance_;
}  // namespace kevin
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fimu_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fimu_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2fimu_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.accels_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.gyros_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.mags_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.orientation_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.imu_temp_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.temperature_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.pressure_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.altitude_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.calibrated_),
        PROTOBUF_FIELD_OFFSET(::kevin::Imu, _impl_.timestamp_),
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 18, -1, sizeof(::kevin::Imu)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kevin::_Imu_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fimu_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017proto/imu.proto\022\005kevin\032\022proto/vector.p"
    "roto\032\026proto/quaternion.proto\"\341\001\n\003Imu\022\027\n\006"
    "accels\030\001 \001(\0132\007.Vector\022\026\n\005gyros\030\002 \001(\0132\007.V"
    "ector\022\025\n\004mags\030\003 \001(\0132\007.Vector\022 \n\013orientat"
    "ion\030\004 \001(\0132\013.Quaternion\022\020\n\010imu_temp\030\005 \001(\001"
    "\022\023\n\013temperature\030\006 \001(\001\022\020\n\010pressure\030\007 \001(\001\022"
    "\020\n\010altitude\030\010 \001(\001\022\022\n\ncalibrated\030\t \001(\010\022\021\n"
    "\ttimestamp\030\n \001(\004b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fimu_2eproto_deps[2] =
    {
        &::descriptor_table_proto_2fquaternion_2eproto,
        &::descriptor_table_proto_2fvector_2eproto,
};
static ::absl::once_flag descriptor_table_proto_2fimu_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2fimu_2eproto = {
    false,
    false,
    304,
    descriptor_table_protodef_proto_2fimu_2eproto,
    "proto/imu.proto",
    &descriptor_table_proto_2fimu_2eproto_once,
    descriptor_table_proto_2fimu_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_proto_2fimu_2eproto::offsets,
    file_level_enum_descriptors_proto_2fimu_2eproto,
    file_level_service_descriptors_proto_2fimu_2eproto,
};
namespace kevin {
// ===================================================================

class Imu::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Imu>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_);
};

void Imu::clear_accels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.accels_ != nullptr) _impl_.accels_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Imu::clear_gyros() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.gyros_ != nullptr) _impl_.gyros_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Imu::clear_mags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mags_ != nullptr) _impl_.mags_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Imu::clear_orientation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Imu::Imu(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kevin.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kevin::Imu& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Imu::Imu(
    ::google::protobuf::Arena* arena,
    const Imu& from)
    : ::google::protobuf::Message(arena) {
  Imu* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.accels_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::Vector>(
                              arena, *from._impl_.accels_)
                        : nullptr;
  _impl_.gyros_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::Vector>(
                              arena, *from._impl_.gyros_)
                        : nullptr;
  _impl_.mags_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::Vector>(
                              arena, *from._impl_.mags_)
                        : nullptr;
  _impl_.orientation_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::Quaternion>(
                              arena, *from._impl_.orientation_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, imu_temp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, imu_temp_),
           offsetof(Impl_, calibrated_) -
               offsetof(Impl_, imu_temp_) +
               sizeof(Impl_::calibrated_));

  // @@protoc_insertion_point(copy_constructor:kevin.Imu)
}
inline PROTOBUF_NDEBUG_INLINE Imu::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Imu::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, accels_),
           0,
           offsetof(Impl_, calibrated_) -
               offsetof(Impl_, accels_) +
               sizeof(Impl_::calibrated_));
}
Imu::~Imu() {
  // @@protoc_insertion_point(destructor:kevin.Imu)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Imu::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.accels_;
  delete _impl_.gyros_;
  delete _impl_.mags_;
  delete _impl_.orientation_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Imu::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(Imu, _impl_._cached_size_),
              false,
          },
          &Imu::MergeImpl,
          &Imu::kDescriptorMethods,
          &descriptor_table_proto_2fimu_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 4, 0, 2> Imu::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Imu, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Imu_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kevin::Imu>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .Vector accels = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.accels_)}},
    // .Vector gyros = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Imu, _impl_.gyros_)}},
    // .Vector mags = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Imu, _impl_.mags_)}},
    // .Quaternion orientation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Imu, _impl_.orientation_)}},
    // double imu_temp = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.imu_temp_)}},
    // double temperature = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_)}},
    // double pressure = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.pressure_)}},
    // double altitude = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.altitude_)}},
    // bool calibrated = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Imu, _impl_.calibrated_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.calibrated_)}},
    // uint64 timestamp = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Imu, _impl_.timestamp_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Imu, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .Vector accels = 1;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.accels_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Vector gyros = 2;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.gyros_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Vector mags = 3;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.mags_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .Quaternion orientation = 4;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.orientation_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double imu_temp = 5;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.imu_temp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double temperature = 6;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.temperature_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pressure = 7;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.pressure_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double altitude = 8;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool calibrated = 9;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.calibrated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint64 timestamp = 10;
    {PROTOBUF_FIELD_OFFSET(Imu, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Vector>()},
    {::_pbi::TcParser::GetTable<::Vector>()},
    {::_pbi::TcParser::GetTable<::Vector>()},
    {::_pbi::TcParser::GetTable<::Quaternion>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:kevin.Imu)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.accels_ != nullptr);
      _impl_.accels_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.gyros_ != nullptr);
      _impl_.gyros_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.mags_ != nullptr);
      _impl_.mags_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  ::memset(&_impl_.imu_temp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.calibrated_) -
      reinterpret_cast<char*>(&_impl_.imu_temp_)) + sizeof(_impl_.calibrated_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* Imu::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kevin.Imu)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .Vector accels = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.accels_, _impl_.accels_->GetCachedSize(), target, stream);
  }

  // .Vector gyros = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.gyros_, _impl_.gyros_->GetCachedSize(), target, stream);
  }

  // .Vector mags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.mags_, _impl_.mags_->GetCachedSize(), target, stream);
  }

  // .Quaternion orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.orientation_, _impl_.orientation_->GetCachedSize(), target, stream);
  }

  // double imu_temp = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_imu_temp = this->_internal_imu_temp();
  ::uint64_t raw_imu_temp;
  memcpy(&raw_imu_temp, &tmp_imu_temp, sizeof(tmp_imu_temp));
  if (raw_imu_temp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_imu_temp(), target);
  }

  // double temperature = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  ::uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_temperature(), target);
  }

  // double pressure = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pressure = this->_internal_pressure();
  ::uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_pressure(), target);
  }

  // double altitude = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  ::uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_altitude(), target);
  }

  // bool calibrated = 9;
  if (this->_internal_calibrated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_calibrated(), target);
  }

  // uint64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kevin.Imu)
  return target;
}

::size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kevin.Imu)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .Vector accels = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.accels_);
    }

    // .Vector gyros = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.gyros_);
    }

    // .Vector mags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.mags_);
    }

    // .Quaternion orientation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.orientation_);
    }

  }
  // double imu_temp = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_imu_temp = this->_internal_imu_temp();
  ::uint64_t raw_imu_temp;
  memcpy(&raw_imu_temp, &tmp_imu_temp, sizeof(tmp_imu_temp));
  if (raw_imu_temp != 0) {
    total_size += 9;
  }

  // double temperature = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  ::uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 9;
  }

  // double pressure = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pressure = this->_internal_pressure();
  ::uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    total_size += 9;
  }

  // double altitude = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  ::uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 9;
  }

  // uint64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // bool calibrated = 9;
  if (this->_internal_calibrated() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Imu::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Imu*>(&to_msg);
  auto& from = static_cast<const Imu&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kevin.Imu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.accels_ != nullptr);
      if (_this->_impl_.accels_ == nullptr) {
        _this->_impl_.accels_ =
            ::google::protobuf::Message::CopyConstruct<::Vector>(arena, *from._impl_.accels_);
      } else {
        _this->_impl_.accels_->MergeFrom(*from._impl_.accels_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.gyros_ != nullptr);
      if (_this->_impl_.gyros_ == nullptr) {
        _this->_impl_.gyros_ =
            ::google::protobuf::Message::CopyConstruct<::Vector>(arena, *from._impl_.gyros_);
      } else {
        _this->_impl_.gyros_->MergeFrom(*from._impl_.gyros_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.mags_ != nullptr);
      if (_this->_impl_.mags_ == nullptr) {
        _this->_impl_.mags_ =
            ::google::protobuf::Message::CopyConstruct<::Vector>(arena, *from._impl_.mags_);
      } else {
        _this->_impl_.mags_->MergeFrom(*from._impl_.mags_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.orientation_ != nullptr);
      if (_this->_impl_.orientation_ == nullptr) {
        _this->_impl_.orientation_ =
            ::google::protobuf::Message::CopyConstruct<::Quaternion>(arena, *from._impl_.orientation_);
      } else {
        _this->_impl_.orientation_->MergeFrom(*from._impl_.orientation_);
      }
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_imu_temp = from._internal_imu_temp();
  ::uint64_t raw_imu_temp;
  memcpy(&raw_imu_temp, &tmp_imu_temp, sizeof(tmp_imu_temp));
  if (raw_imu_temp != 0) {
    _this->_impl_.imu_temp_ = from._impl_.imu_temp_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_temperature = from._internal_temperature();
  ::uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_impl_.temperature_ = from._impl_.temperature_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pressure = from._internal_pressure();
  ::uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    _this->_impl_.pressure_ = from._impl_.pressure_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  ::uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _this->_impl_.altitude_ = from._impl_.altitude_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_calibrated() != 0) {
    _this->_impl_.calibrated_ = from._impl_.calibrated_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kevin.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Imu::InternalSwap(Imu* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, _impl_.calibrated_)
      + sizeof(Imu::_impl_.calibrated_)
      - PROTOBUF_FIELD_OFFSET(Imu, _impl_.accels_)>(
          reinterpret_cast<char*>(&_impl_.accels_),
          reinterpret_cast<char*>(&other->_impl_.accels_));
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kevin
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2fimu_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
